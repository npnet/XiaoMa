import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.application'
//apply plugin: 'android-aspectjx' //music 插件配置有问题，引入代码配置形式
apply from: 'sdk.gradle'
apply from: "$rootDir$Android"
apply from: "$rootDir$Modules"
apply from: "$rootDir$Tinker"

android application('com.xiaoma.music')
dependencies dependency(Music)

android {
    defaultConfig {
        compileSdkVersion 28
        multiDexEnabled true
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

sdk {
    usbMusic 'yq'
    bluetoothMusic 'yq'
    onlineMusic 'kw'
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation "com.android.support.constraint:constraint-layout:${CONSTRAINT_LAYOUT}"
    implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:${BASE_RECYCLERVIEW_ADAPTER_HELPER}"
    implementation "org.simple:androideventbus:$EVENT_BUS_VERSION"
    implementation(name: 'kuwo_sdk_xiaomalixing_yiqibtx80_2.6.4.0', ext: 'aar')
    annotationProcessor "com.github.bumptech.glide:compiler:${GLIDE_VERSION}"
//    implementation files("${XMJars}nForeAPI.jar")
//    implementation files("${XMJars}framework.jar")
    implementation project(':XMLibs:VR:Vr')
    implementation(name: 'btext-release', ext: 'aar')
}

tinker {
    appClassName 'com.xiaoma.music.MusicApp'
    buildPatch {
        baseApkPath ''
        baseResMapping ''
        baseMapping ''
    }
    patchDesc {
        baseVersion ''
        patchVersion 0
        patchMessage ''
    }
}

//----------------------------------------android-aspectjx  start-----------------------------------
final def log = project.logger
final def variants = project.android.applicationVariants
variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return
    }
    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)
        MessageHandler handler = new MessageHandler(true)
        new Main().run(args, handler)
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break
            }
        }
    }
}
//----------------------------------------android-aspectjx  end-------------------------------------