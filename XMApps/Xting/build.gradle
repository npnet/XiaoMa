import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.application'
// apply plugin: 'android-aspectjx'
apply from: 'sdk.gradle'
apply from: "$rootDir$Android"
apply from: "$rootDir$Modules"
apply from: "$rootDir$Tinker"

android application('com.xiaoma.xting')
dependencies dependency(Xting)

android {
    defaultConfig {
        compileSdkVersion project.COMPILE_SDK_VERSION as int
        multiDexEnabled true
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    android {
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }
}

sdk {
    boolean isCar = BUILD_PLATFORM.equalsIgnoreCase("CAR")
    onlineFM 'xmly'
    localFM isCar ? 'yq' : 'test'
    acrCloud 'acr'
}

dependencies {
    implementation "com.android.support.constraint:constraint-layout:${CONSTRAINT_LAYOUT}"
    implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:${BASE_RECYCLERVIEW_ADAPTER_HELPER}"
    implementation files("${XMJars}TingPhoneOpenSDK_6.2.16.jar")
    implementation files("${XMJars}XmDownload_1.6.jar")
//    boolean isCar = BUILD_PLATFORM.equalsIgnoreCase("CAR")
//    if (isCar) {
//        implementation files("${XMJars}carlib_v3.2_2019_2_19.jar")
//    }
    implementation files("${XMJars}acrcloud-universal-sdk-1.2.4.jar")
    implementation "android.arch.persistence.room:runtime:$ROOM_VERSION"
    annotationProcessor "android.arch.persistence.room:compiler:$ROOM_VERSION"
    annotationProcessor "com.github.bumptech.glide:compiler:${GLIDE_VERSION}"
    implementation project(':XMLibs:VR:Vr')
    implementation('com.kaolafm:open-sdk:1.5.0') {
        exclude module: 'okhttp'
    }
}

tinker {
    appClassName 'com.xiaoma.xting.XtingApp'
    buildPatch {
        baseApkPath ''
        baseResMapping ''
        baseMapping ''
    }
    patchDesc {
        baseVersion '5.1.1.4'
        patchVersion 0
        patchMessage 'base'
    }
}

//----------------------------------------android-aspectjx  start-----------------------------------
final def log = project.logger
final def variants = project.android.applicationVariants
variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return
    }
    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)
        MessageHandler handler = new MessageHandler(true)
        new Main().run(args, handler)
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break
            }
        }
    }
}
//----------------------------------------android-aspectjx  end-------------------------------------